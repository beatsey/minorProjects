/*
Физрук Арсений

В начале урока физкультуры ученики 13А класса выстроились в ряд. Физрук Арсений любит порядок, но школьники опять встали не по росту. Он решил проучить их и выбрать какой-то хороший отрезок детей, и отправить их играть в волейбол, а остальных оставить выполнять нормативы. Хорошим отрезком детей Арсений называет такой непрерывный отрезок детей в ряду, что их рост строго убывает. Ученики любят волейбол, поэтому хотят понять, есть ли у них шанс оказаться в числе счастливчиков. Для этого каждый школьник хочет выяснить, как много людей может пойти играть с ним в волейбол, то есть найти длину наибольшего хорошего отрезка, содержащего его самого.
Формат входных данных
Первая строка содержит одно целое число n (1 <= n <= 105) — количество учеников 13А, пришедших на урок.
Вторая строка содержит n целых чисел a1, a2, ..., an (1 <= ai <= 109) — рост школьников в том порядке, в котором они встали изначально.
Формат выходных данных
Выведите n целых чисел через пробел, где i-е число — максимальная длина хорошего отрезка, содержащего школьника номер i.

Примеры
стандартный ввод стандартный вывод
5
7 4 2 2 10

3 3 3 1 1


5
2 4 6 4 2

1 1 3 3 3

*/

#include <iostream>

int main()
{
    // Выключаем синхронизацию для скорости
    std::ios::sync_with_stdio(false);
    int n;
    std::cin >> n;

    int* counters = new int[n], curSeqLen = 1, curSeqStart=0, previousHeight;

    std::cin >> previousHeight;

    for (int i = 0; i < n; i++)
        counters[i] = 0;


    for (int i = 1,height; i < n; i++) {
        std::cin >> height;

        if (height < previousHeight) {
            curSeqLen++;
        }
        else {
            while(curSeqStart<i)
                counters[curSeqStart++] = curSeqLen;

            curSeqLen = 1;
            curSeqStart = i;
        }

        previousHeight = height;

    }

    while (curSeqStart < n)
        counters[curSeqStart++] = curSeqLen;

    for (int i = 0; i < n; i++) {
        std::cout << counters[i] << ' ';
    }

}