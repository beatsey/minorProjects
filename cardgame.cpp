/*
 арточна€ игра

¬ игре в зожника карточна€ колода раздаетс€ поровну двум игрокам.
ƒалее они вскрывают по одной верхней карте, и тот, чь€ карта старше, забирает себе обе вскрытые карты, которые кладутс€ под низ его колоды.
“от, кто остаетс€ без карт - проигрывает.

ƒл€ простоты будем считать, что все карты различны по номиналу, а также, что сама€ младша€ карта побеждает самую старшую карту ("шестерка берет туза").

»грок, который забирает себе карты, сначала кладет под низ своей колоды карту первого игрока, затем карту второго игрока (то есть карта второго игрока оказываетс€ внизу колоды).

Ќапишите программу, котора€ моделирует игру в зожника и определ€ет, кто выигрывает.
¬ игре участвует 10 карт, имеющих значени€ от 0 до 9, больша€ карта побеждает меньшую, карта со значением 0 побеждает карту 9.

‘ормат ввода
ƒве строки: перва€ строка содержит 5 чисел, разделенных пробелами - номера карт первого игрока, втора€ строка - номера карт второго игрока.
 арты перечислены сверху вниз, то есть кажда€ строка начинаетс€ с той карты, котора€ будет открыта первой.

‘ормат вывода
ѕрограмма должна определить, кто выигрывает при данной раздаче, и вывести слово "first" или "second", после чего вывести количество ходов, сделанных до выигрыша.
≈сли на прот€жении 10^6 ходов игра не заканчиваетс€, программа должна вывести слово "botva".

ѕример
1 3 5 7 9
2 4 6 8 0

second 5



*/

#include <iostream>
#include <queue>

int main()
{
	std::queue<int> first, second;
	int k;
	for (int i = 0; i < 5; i++) {
		std::cin >> k;
		first.push(k);
	}
	for (int i = 0; i < 5; i++) {
		std::cin >> k;
		second.push(k);
	}

	k = 0;
	while (!first.empty() && !second.empty()) {
		int a = first.front();
		int b = second.front();
		first.pop();
		second.pop();

		if (a > b && !(a == 9 && b == 0)) {
			// ѕобедил первый
			first.push(a);
			first.push(b);
		}
		else {
			// ѕобедил второй
			second.push(a);
			second.push(b);
		}
		k++;
		if (k == 1000000) {
			std::cout << "botva" << std::endl;
			return 0;
		}
	}
	if (first.empty()) {
		std::cout << "second " << k << std::endl;
	}
	else {
		std::cout << "first " << k << std::endl;
	}
}