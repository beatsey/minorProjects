/*
Игра в 2048
Петя решил поиграть в известную игру 2048. Но играть в классическую версию ему уже неинтересно и он разработал улучшенную версию. У игрока имеется набор из нескольких чисел, где каждое число - степень двойки с натуральным показателем, не превыщающим n. Каждый ход игрок может сделать одно из следующих действий:

Сгенерировать число 2^k, это действие занимает ak секунд.

Умножить все имеющиеся числа на 2. При этом, если вы умножаете на 2 число 2^n, оно превращается в число 2. Такое действие занимает x секунд.

Например, если вы собрали набор 2, 32, 128 и n=7, то после выполнения второго действия у вас будет набор 4, 64, 2.
Игра заканчивается, когда вы собираете ровно n чисел, и все они различны. Изначально у игрока нет чисел. Все ходы выполняются последовательно, один за одним.
Петя решил провести соревнования по новой игре, и вы принимаете в нём участие. Спланируйте свою тактику так, чтобы быстрее всего закончить игру.

Формат входных данных
В первой строке даны два натуральных числа n (2<=n<=2000) и x (1<=x<=10e9) - требуемое количество чисел и время работы умножителя.
Во второй строке задано n целых чисел ai (1<=ai<=10e9) - время генерации числа 2^i.

Формат выходных данных
Выведите одно число - минимальное количество времени, необходимое для прохождения игры.

Примеры
3 5
1 2 3

6


4 5
1 100 3 4

13

В первом тесте невыгодно использовать второе действие, поэтому просто последовательно сгенерируем все степени двойки.
Во втором тесте выгодно сгенерировать за первые два хода (2,8), после этого умножить их на два, получить набор (4,16), и за два хода сгенерировать 2 и 8. Ответ: 1+3+5+1+3=13.

*/
#include <iostream>

int readInt() {
    char ch;
    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');

    bool minus = false;
    int result;

    if (ch == '-') {
        minus = true;
        result = getchar() - '0';
    }
    else {
        result = ch - '0';
    }

    while ((ch = getchar()) >= '0' && ch <= '9')
        result = result * 10 + ch - '0';

    return minus ? -result : result;
}

int main()
{
    int n = readInt() , x = readInt();
    
    int* a = new int[(long long)n + 1];
    for (int i = 0; i < n; i++) {
        a[i] = readInt();
    }
    a[n] = a[0];

    int totalCost = 0;
    
    bool redo = true;
    while (redo) {
        int sumDif = 0;
        redo = false;
        for (int i = n-1; i >=0; i--) {
            int dif = a[i] - a[i + 1];
            if (dif <= 0)
                continue;
            
            sumDif += dif;

            if (sumDif > x) {
                // Умножаем
                for (int j = n; j > 0; j--) {
                    if (a[j] > a[j - 1])
                        a[j] = a[j - 1];
                }
                a[0] = a[n];

                totalCost += x; // Посчитали умножение
                redo = true;
                break;
            }
        }
    }

    for (int i = n-1; i >=0; i--) {
        totalCost += a[i];
    }

    std::cout << totalCost << std::endl;
}